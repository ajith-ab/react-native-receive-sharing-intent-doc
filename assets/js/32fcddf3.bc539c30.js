(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{77:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return d}));var i=t(3),a=t(7),r=(t(0),t(93)),o={sidebar_position:3},s={unversionedId:"ios",id:"ios",isDocsHomePage:!1,title:"IOS",description:"/ios//info.plist",source:"@site/docs/ios.md",sourceDirName:".",slug:"/ios",permalink:"/react-native-receive-sharing-intent/docs/docs/ios",editUrl:"https://ajith-ab.github.io/react-native-receive-sharing-intent/docs/docs/ios.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Android",permalink:"/react-native-receive-sharing-intent/docs/docs/android"},next:{title:"Demo",permalink:"/react-native-receive-sharing-intent/docs/docs/demo"}},l=[{value:"Create Share Extension",id:"create-share-extension",children:[]},{value:"Create App Group",id:"create-app-group",children:[]},{value:"Compiling issues and their fixes",id:"compiling-issues-and-their-fixes",children:[]}],p={toc:l};function d(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"<project_folder>/ios/<project_name>/info.plist")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-xml"},'<plist version="1.0">\n<dict>\n  \n  .....\n\n<key>CFBundleURLTypes</key>\n    <array>\n        <dict>\n            <key>CFBundleTypeRole</key>\n            <string>Editor</string>\n            <key>CFBundleURLSchemes</key>\n            <array>\n                <string>ShareMedia</string> \x3c!-- share url protocol (must be unique to your app, suggest using your apple bundle id) --\x3e\n            </array>\n        </dict>\n        <dict/>\n    </array>\n\n<key>NSPhotoLibraryUsageDescription</key>\n  <string>\n      To upload photos, please allow permission to access your photo library.\n  </string>\n  \n  ....\n  \n</dict>\n</plist>  \n')),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"<project_folder>/ios/<project_name>/AppDelegate.m")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-objectivec"},"....\n\n#import <React/RCTLinkingManager.h> // Add this Line in Header of file\n\n....\n@implementation AppDelegate\n\n...\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n            options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n  return [RCTLinkingManager application:application openURL:url options:options];\n}\n\n@end\n\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"<project_folder>/ios/<your project name>/<your project name>.entitlements")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-xml"},"\n....\n    \x3c!--TODO:  Add this tag, if you want support opening urls into your app--\x3e\n    <key>com.apple.developer.associated-domains</key>\n    <array>\n        <string>applinks:example.com</string>\n    </array>\n....\n\n")),Object(r.b)("h2",{id:"create-share-extension"},"Create Share Extension"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},'Using xcode, go to File/New/Target and Choose "Share Extension"'),Object(r.b)("li",{parentName:"ul"},'Give it a name you want to show on while Sharing i.e. i Choose "Example Share"')),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"Please Change Share Extension Target deployment version to Same as Main Project Target deployment version"))),Object(r.b)("p",null,"  ",Object(r.b)("inlineCode",{parentName:"p"},"<project_folder>/ios/<Your Share Extension Name>/info.plist")," "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-xml"},'<plist version="1.0">\n<dict>\n...\n  <key>NSExtension</key>\n  <dict>\n    <key>NSExtensionAttributes</key>\n        <dict>\n            <key>PHSupportedMediaTypes</key>\n               <array>\n                    \x3c!--TODO: Add this flag, if you want to support sharing video into your app--\x3e\n                   <string>Video</string>\n                   \x3c!--TODO: Add this flag, if you want to support sharing images into your app--\x3e\n                   <string>Image</string>\n               </array>\n            <key>NSExtensionActivationRule</key>\n            <dict>\n                \x3c!--TODO: Add this flag, if you want to support sharing text into your app--\x3e\n                <key>NSExtensionActivationSupportsText</key>\n                <true/>\n                \x3c!--TODO: Add this tag, if you want to support sharing urls into your app--\x3e\n              <key>NSExtensionActivationSupportsWebURLWithMaxCount</key>\n              <integer>1</integer>\n              \x3c!--TODO: Add this flag, if you want to support sharing images into your app--\x3e\n                <key>NSExtensionActivationSupportsImageWithMaxCount</key>\n                <integer>100</integer>\n                \x3c!--TODO: Add this flag, if you want to support sharing video into your app--\x3e\n                <key>NSExtensionActivationSupportsMovieWithMaxCount</key>\n                <integer>100</integer>\n                \x3c!--TODO: Add this flag, if you want to support sharing other files into your app--\x3e\n                \x3c!--Change the integer to however many files you want to be able to share at a time--\x3e\n                <key>NSExtensionActivationSupportsFileWithMaxCount</key>\n                <integer>100</integer>\n            </dict>\n        </dict>\n    <key>NSExtensionMainStoryboard</key>\n    <string>MainInterface</string>\n    <key>NSExtensionPointIdentifier</key>\n    <string>com.apple.share-services</string>\n  </dict>\n\n</dict>\n</plist>\n\n')),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"<project_folder>/ios/<Your Share Extension Name>/ShareViewController.swift")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("b",null," Note: Important ")," change the `hostAppBundleIdentifier` value to your main host app bundle identifier (example in my case: `com.rnreceivesharingintent` ) in this `ShareViewController.swift`")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},'\nimport UIKit\nimport Social\nimport MobileCoreServices\nimport Photos\n\nclass ShareViewController: SLComposeServiceViewController {\n // TODO: IMPORTANT: This should be your host app bundle identifier\n let hostAppBundleIdentifier = "com.rnreceivesharingintent"\n let shareProtocol = "ShareMedia" //share url protocol (must be unique to your app, suggest using your apple bundle id, ie: `hostAppBundleIdentifier`)\n let sharedKey = "ShareKey"\n var sharedMedia: [SharedMediaFile] = []\n var sharedText: [String] = []\n let imageContentType = kUTTypeImage as String\n let videoContentType = kUTTypeMovie as String\n let textContentType = kUTTypeText as String\n let urlContentType = kUTTypeURL as String\n let fileURLType = kUTTypeFileURL as String;\n \n override func isContentValid() -> Bool {\n   return true\n }\n \n override func viewDidLoad() {\n       super.viewDidLoad();\n   }\n\n override func viewDidAppear(_ animated: Bool) {\n         super.viewDidAppear(animated)\n\n   if let content = extensionContext!.inputItems[0] as? NSExtensionItem {\n     if let contents = content.attachments {\n       for (index, attachment) in (contents).enumerated() {\n         if attachment.hasItemConformingToTypeIdentifier(imageContentType) {\n           handleImages(content: content, attachment: attachment, index: index)\n         } else if attachment.hasItemConformingToTypeIdentifier(textContentType) {\n           handleText(content: content, attachment: attachment, index: index)\n         } else if attachment.hasItemConformingToTypeIdentifier(fileURLType) {\n           handleFiles(content: content, attachment: attachment, index: index)\n         } else if attachment.hasItemConformingToTypeIdentifier(urlContentType) {\n           handleUrl(content: content, attachment: attachment, index: index)\n         } else if attachment.hasItemConformingToTypeIdentifier(videoContentType) {\n           handleVideos(content: content, attachment: attachment, index: index)\n         }\n       }\n     }\n   }\n }\n \n override func didSelectPost() {\n       print("didSelectPost");\n   }\n\n override func configurationItems() -> [Any]! {\n   // To add configuration options via table cells at the bottom of the sheet, return an array of SLComposeSheetConfigurationItem here.\n   return []\n }\n \n private func handleText (content: NSExtensionItem, attachment: NSItemProvider, index: Int) {\n   attachment.loadItem(forTypeIdentifier: textContentType, options: nil) { [weak self] data, error in\n     \n     if error == nil, let item = data as? String, let this = self {\n       \n       this.sharedText.append(item)\n       \n       // If this is the last item, save imagesData in userDefaults and redirect to host app\n       if index == (content.attachments?.count)! - 1 {\n         let userDefaults = UserDefaults(suiteName: "group.\\(this.hostAppBundleIdentifier)")\n         userDefaults?.set(this.sharedText, forKey: this.sharedKey)\n         userDefaults?.synchronize()\n         this.redirectToHostApp(type: .text)\n       }\n       \n     } else {\n       self?.dismissWithError()\n     }\n   }\n }\n \n private func handleUrl (content: NSExtensionItem, attachment: NSItemProvider, index: Int) {\n   attachment.loadItem(forTypeIdentifier: urlContentType, options: nil) { [weak self] data, error in\n     \n     if error == nil, let item = data as? URL, let this = self {\n       \n       this.sharedText.append(item.absoluteString)\n       \n       // If this is the last item, save imagesData in userDefaults and redirect to host app\n       if index == (content.attachments?.count)! - 1 {\n         let userDefaults = UserDefaults(suiteName: "group.\\(this.hostAppBundleIdentifier)")\n         userDefaults?.set(this.sharedText, forKey: this.sharedKey)\n         userDefaults?.synchronize()\n         this.redirectToHostApp(type: .text)\n       }\n       \n     } else {\n       self?.dismissWithError()\n     }\n   }\n }\n \n private func handleImages (content: NSExtensionItem, attachment: NSItemProvider, index: Int) {\n   attachment.loadItem(forTypeIdentifier: imageContentType, options: nil) { [weak self] data, error in\n     \n     if error == nil, let url = data as? URL, let this = self {\n       //  this.redirectToHostApp(type: .media)\n       // Always copy\n       let fileExtension = this.getExtension(from: url, type: .video)\n       let newName = UUID().uuidString\n       let newPath = FileManager.default\n         .containerURL(forSecurityApplicationGroupIdentifier: "group.\\(this.hostAppBundleIdentifier)")!\n         .appendingPathComponent("\\(newName).\\(fileExtension)")\n       let copied = this.copyFile(at: url, to: newPath)\n       if(copied) {\n         this.sharedMedia.append(SharedMediaFile(path: newPath.absoluteString, thumbnail: nil, duration: nil, type: .image))\n       }\n       \n       // If this is the last item, save imagesData in userDefaults and redirect to host app\n       if index == (content.attachments?.count)! - 1 {\n         let userDefaults = UserDefaults(suiteName: "group.\\(this.hostAppBundleIdentifier)")\n         userDefaults?.set(this.toData(data: this.sharedMedia), forKey: this.sharedKey)\n         userDefaults?.synchronize()\n         this.redirectToHostApp(type: .media)\n       }\n       \n     } else {\n       self?.dismissWithError()\n     }\n   }\n }\n \n private func handleVideos (content: NSExtensionItem, attachment: NSItemProvider, index: Int) {\n   attachment.loadItem(forTypeIdentifier: videoContentType, options:nil) { [weak self] data, error in\n     \n     if error == nil, let url = data as? URL, let this = self {\n       \n       // Always copy\n       let fileExtension = this.getExtension(from: url, type: .video)\n       let newName = UUID().uuidString\n       let newPath = FileManager.default\n         .containerURL(forSecurityApplicationGroupIdentifier: "group.\\(this.hostAppBundleIdentifier)")!\n         .appendingPathComponent("\\(newName).\\(fileExtension)")\n       let copied = this.copyFile(at: url, to: newPath)\n       if(copied) {\n         guard let sharedFile = this.getSharedMediaFile(forVideo: newPath) else {\n           return\n         }\n         this.sharedMedia.append(sharedFile)\n       }\n\n       // If this is the last item, save imagesData in userDefaults and redirect to host app\n       if index == (content.attachments?.count)! - 1 {\n         let userDefaults = UserDefaults(suiteName: "group.\\(this.hostAppBundleIdentifier)")\n         userDefaults?.set(this.toData(data: this.sharedMedia), forKey: this.sharedKey)\n         userDefaults?.synchronize()\n         this.redirectToHostApp(type: .media)\n       }\n       \n     } else {\n       self?.dismissWithError()\n     }\n   }\n }\n \n private func handleFiles (content: NSExtensionItem, attachment: NSItemProvider, index: Int) {\n   attachment.loadItem(forTypeIdentifier: fileURLType, options: nil) { [weak self] data, error in\n     \n     if error == nil, let url = data as? URL, let this = self {\n       \n       // Always copy\n       let newName = this.getFileName(from :url)\n       let newPath = FileManager.default\n         .containerURL(forSecurityApplicationGroupIdentifier: "group.\\(this.hostAppBundleIdentifier)")!\n         .appendingPathComponent("\\(newName)")\n       let copied = this.copyFile(at: url, to: newPath)\n       if (copied) {\n         this.sharedMedia.append(SharedMediaFile(path: newPath.absoluteString, thumbnail: nil, duration: nil, type: .file))\n       }\n       \n       if index == (content.attachments?.count)! - 1 {\n         let userDefaults = UserDefaults(suiteName: "group.\\(this.hostAppBundleIdentifier)")\n         userDefaults?.set(this.toData(data: this.sharedMedia), forKey: this.sharedKey)\n         userDefaults?.synchronize()\n         this.redirectToHostApp(type: .file)\n       }\n       \n     } else {\n       self?.dismissWithError()\n     }\n   }\n }\n \n private func dismissWithError() {\n   print("[ERROR] Error loading data!")\n   let alert = UIAlertController(title: "Error", message: "Error loading data", preferredStyle: .alert)\n   \n   let action = UIAlertAction(title: "Error", style: .cancel) { _ in\n     self.dismiss(animated: true, completion: nil)\n   }\n   \n   alert.addAction(action)\n   present(alert, animated: true, completion: nil)\n   extensionContext!.completeRequest(returningItems: [], completionHandler: nil)\n }\n \n private func redirectToHostApp(type: RedirectType) {\n   let url = URL(string: "\\(shareProtocol)://dataUrl=\\(sharedKey)#\\(type)")\n   var responder = self as UIResponder?\n   let selectorOpenURL = sel_registerName("openURL:")\n   \n   while (responder != nil) {\n     if (responder?.responds(to: selectorOpenURL))! {\n       let _ = responder?.perform(selectorOpenURL, with: url)\n     }\n     responder = responder!.next\n   }\n   extensionContext!.completeRequest(returningItems: [], completionHandler: nil)\n }\n \n enum RedirectType {\n   case media\n   case text\n   case file\n }\n \n func getExtension(from url: URL, type: SharedMediaType) -> String {\n   let parts = url.lastPathComponent.components(separatedBy: ".")\n   var ex: String? = nil\n   if (parts.count > 1) {\n     ex = parts.last\n   }\n   \n   if (ex == nil) {\n     switch type {\n     case .image:\n       ex = "PNG"\n     case .video:\n       ex = "MP4"\n     case .file:\n       ex = "TXT"\n     }\n   }\n   return ex ?? "Unknown"\n }\n \n func getFileName(from url: URL) -> String {\n   var name = url.lastPathComponent\n   \n   if (name == "") {\n     name = UUID().uuidString + "." + getExtension(from: url, type: .file)\n   }\n   \n   return name\n }\n \n func copyFile(at srcURL: URL, to dstURL: URL) -> Bool {\n   do {\n     if FileManager.default.fileExists(atPath: dstURL.path) {\n       try FileManager.default.removeItem(at: dstURL)\n     }\n     try FileManager.default.copyItem(at: srcURL, to: dstURL)\n   } catch (let error) {\n     print("Cannot copy item at \\(srcURL) to \\(dstURL): \\(error)")\n     return false\n   }\n   return true\n }\n \n private func getSharedMediaFile(forVideo: URL) -> SharedMediaFile? {\n   let asset = AVAsset(url: forVideo)\n   let duration = (CMTimeGetSeconds(asset.duration) * 1000).rounded()\n   let thumbnailPath = getThumbnailPath(for: forVideo)\n   \n   if FileManager.default.fileExists(atPath: thumbnailPath.path) {\n     return SharedMediaFile(path: forVideo.absoluteString, thumbnail: thumbnailPath.absoluteString, duration: duration, type: .video)\n   }\n   \n   var saved = false\n   let assetImgGenerate = AVAssetImageGenerator(asset: asset)\n   assetImgGenerate.appliesPreferredTrackTransform = true\n   //        let scale = UIScreen.main.scale\n   assetImgGenerate.maximumSize =  CGSize(width: 360, height: 360)\n   do {\n     let img = try assetImgGenerate.copyCGImage(at: CMTimeMakeWithSeconds(600, preferredTimescale: Int32(1.0)), actualTime: nil)\n     try UIImage.pngData(UIImage(cgImage: img))()?.write(to: thumbnailPath)\n     saved = true\n   } catch {\n     saved = false\n   }\n   \n   return saved ? SharedMediaFile(path: forVideo.absoluteString, thumbnail: thumbnailPath.absoluteString, duration: duration, type: .video) : nil\n   \n }\n \n private func getThumbnailPath(for url: URL) -> URL {\n   let fileName = Data(url.lastPathComponent.utf8).base64EncodedString().replacingOccurrences(of: "==", with: "")\n   let path = FileManager.default\n     .containerURL(forSecurityApplicationGroupIdentifier: "group.\\(hostAppBundleIdentifier)")!\n     .appendingPathComponent("\\(fileName).jpg")\n   return path\n }\n \n class SharedMediaFile: Codable {\n   var path: String; // can be image, video or url path. It can also be text content\n   var thumbnail: String?; // video thumbnail\n   var duration: Double?; // video duration in milliseconds\n   var type: SharedMediaType;\n   \n   \n   init(path: String, thumbnail: String?, duration: Double?, type: SharedMediaType) {\n     self.path = path\n     self.thumbnail = thumbnail\n     self.duration = duration\n     self.type = type\n   }\n   \n   // Debug method to print out SharedMediaFile details in the console\n   func toString() {\n     print("[SharedMediaFile] \\n\\tpath: \\(self.path)\\n\\tthumbnail: \\(self.thumbnail)\\n\\tduration: \\(self.duration)\\n\\ttype: \\(self.type)")\n   }\n }\n \n enum SharedMediaType: Int, Codable {\n   case image\n   case video\n   case file\n }\n \n func toData(data: [SharedMediaFile]) -> Data {\n   let encodedData = try? JSONEncoder().encode(data)\n   return encodedData!\n }\n}\n\nextension Array {\n subscript (safe index: UInt) -> Element? {\n   return Int(index) < count ? self[Int(index)] : nil\n }\n}\n\n')),Object(r.b)("h2",{id:"create-app-group"},"Create App Group"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Go to the Capabilities tab and switch on the App Groups switch for both targets. Add a new group and name it group.YOUR_HOST_APP_BUNDLE_IDENTIFIER in my case group.com.rnreceivesharinginten")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"App group name must be start with ",Object(r.b)("inlineCode",{parentName:"p"},"group.")))),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Create a app group for main App")),Object(r.b)("p",null,Object(r.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/ajith-ab/react-native-receive-sharing-intent/master/doc/app%20group2.png",alt:"group text"})),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},"Create a app group for Share Extension")),Object(r.b)("p",null,Object(r.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/ajith-ab/react-native-receive-sharing-intent/master/doc/app%20group1.png",alt:"group text"})),Object(r.b)("h2",{id:"compiling-issues-and-their-fixes"},"Compiling issues and their fixes"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Error: App does not build after adding Share Extension?"),Object(r.b)("p",{parentName:"li"},"Fix: Check Build Settings of your share extension and remove everything that tries to import Cocoapods from your main project. i.e. remove everything under Linking/Other Linker Flags")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"You might need to disable bitcode for the extension target")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{href:"https://github.com/facebookarchive/react-native-fbsdk/issues/794"},"ERROR RUNNING ON XCODE 12")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{href:"https://khushwanttanwar.medium.com/xcode-12-compilation-errors-while-running-with-ios-14-simulators-5731c91326e9"},"Xcode 12 Compilation Errors (While running with iOS 14 Simulators)"))))}d.isMDXComponent=!0}}]);